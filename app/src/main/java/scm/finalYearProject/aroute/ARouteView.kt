package scm.finalYearProject.aroute

import android.location.Address
import android.location.Geocoder
import android.opengl.GLSurfaceView
import android.util.Log
import android.view.View
import android.widget.EditText
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.lifecycle.DefaultLifecycleObserver
import androidx.lifecycle.LifecycleOwner
import com.google.android.gms.maps.SupportMapFragment
import com.google.android.gms.maps.model.LatLng
import com.google.ar.core.Earth
import com.google.ar.core.GeospatialPose
import examples.java.common.helpers.DisplayRotationHelper
import java.io.IOException
import java.util.*

/** Contains UI elements for ARoute activity. */
class ARouteView(val activity: ARoute) : DefaultLifecycleObserver {
    val root = View.inflate(activity, R.layout.activity_aroute, null)
    val surfaceView = root.findViewById<GLSurfaceView>(R.id.surfaceview)
    val inputLocation = root.findViewById<EditText>(R.id.inputLocation)
    val instructionsText = root.findViewById<TextView>(R.id.topbar_text)

    lateinit var latLng: LatLng

    val imageViewSearch = root.findViewById<ImageView>(R.id.imageViewSearch)
    fun setImageViewButton()    {
       imageViewSearch.setOnClickListener{
            val location : String = inputLocation.text.toString()
            if ( location == null)  {
                Toast.makeText(activity, "Please enter your destination", Toast.LENGTH_LONG).show()
            } else  {
                val geocoder = Geocoder(activity, Locale.TRADITIONAL_CHINESE)

                try {
                    val listAddress = geocoder.getFromLocationName(location, 1)
                    if (listAddress.size > 0)   {
                        latLng = LatLng(listAddress.get(0).latitude, listAddress.get(0).longitude)
                        Toast.makeText(activity, "Hello" + latLng, Toast.LENGTH_LONG).show()
                        activity.view.mapView?.makeSearchLocationMarker(
                                latLng.latitude, latLng.longitude
                        )
                        //Showing the anchor on ARView by passing the Latlng position generated by Geocoder
                        activity.renderer.onMapClick(latLng)
                        activity.view.mapView?.clearPolyline()
                        activity.renderer.getDirection(latLng)
                    }
                } catch (e: IOException)    {
                    //Catch Exception//
                }
            }
        }
    }

    val session
        get() = activity.arCoreSessionHelper.session

    val snackbarHelper = DisplayRotationHelper.SnackbarHelper()

    var mapView: MapView? = null
    val mapTouchWrapper = root.findViewById<MapTouchWrapper>(R.id.map_wrapper).apply {
        setup { screenLocation ->
            val latLng: LatLng =
                    mapView?.googleMap?.projection?.fromScreenLocation(screenLocation) ?: return@setup
            activity.renderer.onMapClick(latLng)
        }
    }
    val mapFragment =
            (activity.supportFragmentManager.findFragmentById(R.id.map)!! as SupportMapFragment).also {
                it.getMapAsync { googleMap -> mapView = MapView(activity, googleMap) }
            }

    val statusText = root.findViewById<TextView>(R.id.statusText)
    fun updateStatusText(earth: Earth, cameraGeospatialPose: GeospatialPose?) {
        activity.runOnUiThread {


            val poseText = if (cameraGeospatialPose == null) "" else
                activity.getString(R.string.geospatial_pose,
                        cameraGeospatialPose.latitude,
                        cameraGeospatialPose.longitude,
                        cameraGeospatialPose.horizontalAccuracy,
                        cameraGeospatialPose.altitude,
                        cameraGeospatialPose.verticalAccuracy,
                        cameraGeospatialPose.heading,
                        cameraGeospatialPose.headingAccuracy)
            statusText.text = activity.resources.getString(R.string.earth_state,
                    earth.earthState.toString(),
                    earth.trackingState.toString(),
                    poseText)
        }
    }

    fun updateInstructionText(instructions: String) {
        instructionsText.text = instructions
    }

    override fun onResume(owner: LifecycleOwner) {
        surfaceView.onResume()
    }

    override fun onPause(owner: LifecycleOwner) {
        surfaceView.onPause()
    }
}
